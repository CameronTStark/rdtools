Timer unit: 1e-06 s

Total time: 174.891 s
File: /Users/anag/anaconda/envs/python2.7/lib/python2.7/site-packages/rdtools/clearsky_temperature.py
Function: get_clearsky_tamb at line 13

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    13                                           def get_clearsky_tamb(times, latitude, longitude):
    14                                               '''
    15                                               :param times:       DateTimeIndex in local time
    16                                               :param latitude:    float degrees
    17                                               :param longitude:   float degrees
    18                                               :return:            pandas Series of cell sky ambient temperature
    19                                               '''
    20                                           
    21                                           
    22         1           99     99.0      0.0      filepath = pkg_resources.resource_filename('rdtools', 'data/temperature.hdf5')
    23                                           
    24         1            7      7.0      0.0      buffer = timedelta(days=80)
    25         1          116    116.0      0.0      interval = times[1] - times[0]
    26         1           19     19.0      0.0      points_per_day = int(timedelta(days=1)/interval)
    27         1         7591   7591.0      0.0      dt = pd.date_range(times[0] - buffer, times[-1] + buffer, freq=interval)
    28                                           
    29                                               #print model
    30                                           
    31                                           
    32         1          239    239.0      0.0      f = h5py.File(filepath, "r")
    33                                           
    34         1          179    179.0      0.0      a = f['temperature']['day']
    35         1          111    111.0      0.0      b = f['temperature']['night']
    36                                           
    37         1          855    855.0      0.0      lons = len(a[:, 0, 0])
    38         1          218    218.0      0.0      lats = len(a[0, :, 0])
    39                                           
    40         1            2      2.0      0.0      lon_temp = longitude - 180
    41         1            2      2.0      0.0      if lon_temp  < 0:
    42         1            2      2.0      0.0          lon_temp += 360
    43         1            4      4.0      0.0      lon_index = round(float(lons) * float(lon_temp) / 360.0)
    44         1            2      2.0      0.0      lat_index = round(float(lats) * (90.0 - float(latitude)) / 180.0)
    45                                           
    46                                               #print lons, lats, lon_index, lat_index
    47                                           
    48                                           
    49         1          532    532.0      0.0      df = pd.DataFrame(index=dt)
    50         1        76920  76920.0      0.0      df['month'] = df.index.month
    51                                           
    52         1            2      2.0      0.0      ave_day = []
    53         1            2      2.0      0.0      ave_night = []
    54                                           
    55         1            2      2.0      0.0      radius = 0
    56        13           23      1.8      0.0      for k in range(12):
    57                                           
    58        12        17035   1419.6      0.0          day = _get_pixel_value(a,lon_index,lat_index,k,radius)
    59        12        17276   1439.7      0.0          night = _get_pixel_value(b, lon_index, lat_index, k, radius)
    60                                           
    61        12           38      3.2      0.0          if day == float("NaN"):
    62                                                       day = a[:,lat_index,k]
    63        12           18      1.5      0.0          if night == float("NaN"):
    64                                                       night = a[:,lat_index,k]
    65                                           
    66        12           21      1.8      0.0          ave_day.append(day)
    67        12           21      1.8      0.0          ave_night.append(night)
    68                                           
    69                                           
    70                                               #print ave_day, ave_night
    71                                           
    72                                           
    73                                           
    74        13           33      2.5      0.0      for i in range(12):
    75        12       152758  12729.8      0.1          df.loc[df['month']== i+1, 'day'] = ave_day[i]
    76        12       165741  13811.8      0.1          df.loc[df['month'] == i+1, 'night'] = ave_night[i]
    77                                           
    78                                           
    79         1     79447991 79447991.0     45.4      df = df.rolling(window=40 * points_per_day, win_type='gaussian', center=True).mean(std=20 * points_per_day)
    80         1        22755  22755.0      0.0      df = df[(df.index >= times[0]) & (df.index <= times[-1])]
    81                                           
    82    920075      6277532      6.8      3.6      utc_offsets = [y.utcoffset().total_seconds()/3600.0 for y in df.index]
    83         1            3      3.0      0.0      solar_noon_offset = lambda utc_offset : longitude / 180.0 * 12.0 - utc_offset
    84    920075      1747427      1.9      1.0      df['solar_noon_offset'] = [solar_noon_offset(utc_offset) for utc_offset in utc_offsets]
    85                                           
    86         1       115570 115570.0      0.1      df['hour_of_day'] = df.index.hour + df.index.minute / 60.0
    87         1            4      4.0      0.0      df['Clear Sky Temperature (C)'] = df.apply(lambda x:
    88                                                                                          _get_temperature(x['hour_of_day'], x['night'], 
    89         1     86839847 86839847.0     49.7                                                                  x['day'],x['solar_noon_offset']), axis=1)
    90         1          134    134.0      0.0      return df['Clear Sky Temperature (C)']